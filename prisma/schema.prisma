generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(cuid())
  username    String?
  email       String?    @unique
  password    String?
  isAnonymous Boolean    @default(false)
  posts       Post[]
  createdAt   DateTime   @default(now())
  comments    Comment[]
  reactions   Reaction[]
  profilePic  String?
  bio         String?

  // ðŸ‘‡ Corrected DM relations
  sentDMs     DM[] @relation("FromUserDM")
  receivedDMs DM[] @relation("ToUserDM")

  // ðŸ‘‡ Optional message model (if you're keeping this too)
  sentMessages     Message[]     @relation("FromUser")
  receivedMessages Message[]     @relation("ToUser")
  liveMessages     LiveMessage[] // ðŸ‘ˆ Add this
}

model Post {
  id          String     @id @default(cuid())
  content     String?
  mediaUrl    String?
  userId      String?
  isAnonymous Boolean
  createdAt   DateTime   @default(now())
  user        User?      @relation(fields: [userId], references: [id])
  comments    Comment[]
  reactions   Reaction[]
  likes       Int        @default(0)
  isPublic    Boolean    @default(false)
}

model Comment {
  id          String   @id @default(cuid())
  text        String
  userId      String?
  postId      String
  isAnonymous Boolean
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id])
  post        Post     @relation(fields: [postId], references: [id])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  userId    String?
  postId    String
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model DM {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  text      String
  createdAt DateTime @default(now())

  // âœ… Corrected relation names to match User model
  from User @relation("FromUserDM", fields: [fromId], references: [id])
  to   User @relation("ToUserDM", fields: [toId], references: [id])
}

model Message {
  id         String   @id @default(uuid())
  fromUserId String
  toUserId   String
  text       String
  createdAt  DateTime @default(now())

  fromUser User @relation("FromUser", fields: [fromUserId], references: [id])
  toUser   User @relation("ToUser", fields: [toUserId], references: [id])
}

model LiveMessage {
  id        String   @id @default(cuid())
  userId    String?
  text      String
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
}
